/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  TaskWhereFilterInput: { // input type
    content?: string | null; // String
    createdAfter?: any | null; // Date
    createdBefore?: any | null; // Date
    finished?: boolean | null; // Boolean
    ids?: string | null; // ID
    name?: string | null; // String
    updatedAfter?: any | null; // Date
    updatedBefore?: any | null; // Date
  }
  TaskWhereUniqueInput: { // input type
    id: string; // ID!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  Task: { // root type
    content?: string | null; // String
    createdAt: any; // DateTime!
    finished: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  TaskWhereFilterInput: NexusGenInputs['TaskWhereFilterInput'];
  TaskWhereUniqueInput: NexusGenInputs['TaskWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    noop: boolean; // Boolean!
  }
  Query: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
  }
  Task: { // field return type
    content: string | null; // String
    createdAt: any; // DateTime!
    finished: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
}

export interface NexusGenArgTypes {
  Query: {
    task: { // args
      where: NexusGenInputs['TaskWhereUniqueInput']; // TaskWhereUniqueInput!
    }
    tasks: { // args
      where?: NexusGenInputs['TaskWhereFilterInput'] | null; // TaskWhereFilterInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "Task";

export type NexusGenInputNames = "TaskWhereFilterInput" | "TaskWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}