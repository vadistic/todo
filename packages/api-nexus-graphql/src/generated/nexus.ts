/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BooleanEqualInput: { // input type
    eq: boolean; // Boolean!
  }
  BooleanListEqualInput: { // input type
    eq: boolean[]; // [Boolean!]!
  }
  BooleanRequiredEqualInput: { // input type
    eq: boolean; // Boolean!
  }
  BooleanRequiredListEqualInput: { // input type
    eq: boolean[]; // [Boolean!]!
  }
  DateTimeEqualInput: { // input type
    eq: any; // DateTime!
  }
  DateTimeListEqualInput: { // input type
    eq: any[]; // [DateTime!]!
  }
  DateTimeRequiredEqualInput: { // input type
    eq: any; // DateTime!
  }
  DateTimeRequiredListEqualInput: { // input type
    eq: any[]; // [DateTime!]!
  }
  FloatEqualInput: { // input type
    eq: number; // Float!
  }
  FloatListEqualInput: { // input type
    eq: number[]; // [Float!]!
  }
  FloatRequiredEqualInput: { // input type
    eq: number; // Float!
  }
  FloatRequiredListEqualInput: { // input type
    eq: number[]; // [Float!]!
  }
  IDEqualInput: { // input type
    eq: string; // ID!
  }
  IDListEqualInput: { // input type
    eq: string[]; // [ID!]!
  }
  IDRequiredEqualInput: { // input type
    eq: string; // ID!
  }
  IDRequiredListEqualInput: { // input type
    eq: string[]; // [ID!]!
  }
  IntEqualInput: { // input type
    eq: number; // Int!
  }
  IntListEqualInput: { // input type
    eq: number[]; // [Int!]!
  }
  IntRequiredEqualInput: { // input type
    eq: number; // Int!
  }
  IntRequiredListEqualInput: { // input type
    eq: number[]; // [Int!]!
  }
  StringEqualInput: { // input type
    eq: string; // String!
  }
  StringListEqualInput: { // input type
    eq: string[]; // [String!]!
  }
  StringRequiredEqualInput: { // input type
    eq: string; // String!
  }
  StringRequiredListEqualInput: { // input type
    eq: string[]; // [String!]!
  }
  TaskWhereFilterInput: { // input type
    content?: NexusGenInputs['StringEqualInput'] | null; // StringEqualInput
    createdAfter?: NexusGenInputs['DateTimeEqualInput'] | null; // DateTimeEqualInput
    createdBefore?: NexusGenInputs['DateTimeEqualInput'] | null; // DateTimeEqualInput
    finished?: NexusGenInputs['BooleanEqualInput'] | null; // BooleanEqualInput
    ids?: NexusGenInputs['IDListEqualInput'] | null; // IDListEqualInput
    name?: NexusGenInputs['StringEqualInput'] | null; // StringEqualInput
    updatedAfter?: NexusGenInputs['DateTimeEqualInput'] | null; // DateTimeEqualInput
    updatedBefore?: NexusGenInputs['DateTimeEqualInput'] | null; // DateTimeEqualInput
  }
  TaskWhereUniqueInput: { // input type
    id: NexusGenInputs['IDEqualInput']; // IDEqualInput!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  Task: { // root type
    content?: string | null; // String
    createdAt: any; // DateTime!
    finished: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: Date;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BooleanEqualInput: NexusGenInputs['BooleanEqualInput'];
  BooleanListEqualInput: NexusGenInputs['BooleanListEqualInput'];
  BooleanRequiredEqualInput: NexusGenInputs['BooleanRequiredEqualInput'];
  BooleanRequiredListEqualInput: NexusGenInputs['BooleanRequiredListEqualInput'];
  DateTimeEqualInput: NexusGenInputs['DateTimeEqualInput'];
  DateTimeListEqualInput: NexusGenInputs['DateTimeListEqualInput'];
  DateTimeRequiredEqualInput: NexusGenInputs['DateTimeRequiredEqualInput'];
  DateTimeRequiredListEqualInput: NexusGenInputs['DateTimeRequiredListEqualInput'];
  FloatEqualInput: NexusGenInputs['FloatEqualInput'];
  FloatListEqualInput: NexusGenInputs['FloatListEqualInput'];
  FloatRequiredEqualInput: NexusGenInputs['FloatRequiredEqualInput'];
  FloatRequiredListEqualInput: NexusGenInputs['FloatRequiredListEqualInput'];
  IDEqualInput: NexusGenInputs['IDEqualInput'];
  IDListEqualInput: NexusGenInputs['IDListEqualInput'];
  IDRequiredEqualInput: NexusGenInputs['IDRequiredEqualInput'];
  IDRequiredListEqualInput: NexusGenInputs['IDRequiredListEqualInput'];
  IntEqualInput: NexusGenInputs['IntEqualInput'];
  IntListEqualInput: NexusGenInputs['IntListEqualInput'];
  IntRequiredEqualInput: NexusGenInputs['IntRequiredEqualInput'];
  IntRequiredListEqualInput: NexusGenInputs['IntRequiredListEqualInput'];
  StringEqualInput: NexusGenInputs['StringEqualInput'];
  StringListEqualInput: NexusGenInputs['StringListEqualInput'];
  StringRequiredEqualInput: NexusGenInputs['StringRequiredEqualInput'];
  StringRequiredListEqualInput: NexusGenInputs['StringRequiredListEqualInput'];
  TaskWhereFilterInput: NexusGenInputs['TaskWhereFilterInput'];
  TaskWhereUniqueInput: NexusGenInputs['TaskWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    noop: boolean; // Boolean!
  }
  Query: { // field return type
    task: NexusGenRootTypes['Task'] | null; // Task
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
  }
  Task: { // field return type
    content: string | null; // String
    createdAt: any; // DateTime!
    finished: boolean; // Boolean!
    id: string; // String!
    name: string; // String!
    updatedAt: any; // DateTime!
  }
}

export interface NexusGenArgTypes {
  Query: {
    task: { // args
      where: NexusGenInputs['TaskWhereUniqueInput']; // TaskWhereUniqueInput!
    }
    tasks: { // args
      where?: NexusGenInputs['TaskWhereFilterInput'] | null; // TaskWhereFilterInput
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "Task";

export type NexusGenInputNames = "BooleanEqualInput" | "BooleanListEqualInput" | "BooleanRequiredEqualInput" | "BooleanRequiredListEqualInput" | "DateTimeEqualInput" | "DateTimeListEqualInput" | "DateTimeRequiredEqualInput" | "DateTimeRequiredListEqualInput" | "FloatEqualInput" | "FloatListEqualInput" | "FloatRequiredEqualInput" | "FloatRequiredListEqualInput" | "IDEqualInput" | "IDListEqualInput" | "IDRequiredEqualInput" | "IDRequiredListEqualInput" | "IntEqualInput" | "IntListEqualInput" | "IntRequiredEqualInput" | "IntRequiredListEqualInput" | "StringEqualInput" | "StringListEqualInput" | "StringRequiredEqualInput" | "StringRequiredListEqualInput" | "TaskWhereFilterInput" | "TaskWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}